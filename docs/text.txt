1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>


1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>

1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>

1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>

1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>

1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>

1. Что такое css и для чего используется
    css - это каскадная таблица стилей. Предназначены для добавления стилей на html страницу


1. Какие бывают значения display? Расскажите как ведёт себя каждое свойство.
    inline
    Элементы расположены в одну строку и их размеры зависят от содержимого.

    block
    Элемент показывается как блочный. Размер блока определяется размерам самого блока, заданными в стилях.
    Сам блок занимает всю свободную ширину экрана и остальные блоки переносятся на новую строку

    inline-block
    Элементы расположены в одну строку, но уже мы может задавать им размер

    flex
    Элемент ведёт себя как блочный и выкладывает содержимое согласно флекс-модели.
    grid
    ----
2. Keyframes. Для чего нужно
    Правило @keyframes устанавливает ключевые кадры при анимации элемента.
    Ключевой кадр это свойства элемента (прозрачность, цвет др.), которые должны применяться к элементу в заданный момент времени.
    Таким образом, анимация представляет собой плавный переход стилевых свойств от одного ключевого кадра к другому.
    Вычисление промежуточных значений между такими кадрами берёт на себя браузер.

    Самый простой вариант, когда у нас есть только два ключевых кадра — исходное и конечное состояние
    @keyframes box {
     from { left: 0; }
     to { left: 300px; }
    }

    И задаем свойство animation: ... для самого элемента


3. Свойство position: какие бывают значения и для чего они нужны?
    static
    Это значение позволяет элементу находиться в обычном его состоянии, расположенном на своём месте в документе.
    Свойства top, right, bottom, left и z-index не применяются к данному элементу. Это значение по умолчанию.

    relative
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно себя на основе значений top,
    right, bottom и left. Смещение не влияет на положение любых других элементов; таким образом, пространство, заданное для элемента в
    макете страницы, такое же, как если бы позиция была static.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    absolute
    Элемент удаляется из обычного потока документов, и для элемента в макете страницы не создаётся пробела.
    Он расположен относительно его ближайшего относительно позиционированного предка, если таковой имеется;
    в противном случае он помещается относительно исходного содержащего блока. Его конечная позиция определяется
    значениями top, right, bottom, и left.
    Это значение создаёт новый контекст наложения, когда значение z-index не auto.

    fixed
    Элемент выбивается из обычного потока документа, и для элемента в макете страницы не создаётся пространство.
    Он позиционируется относительно исходного содержащего блока, установленного viewport.

    sticky
    Элемент позиционируется в соответствии с нормальным потоком документа, а затем смещается относительно его ближайшего
    прокручивающего предка и содержащего блока (ближайший родительский уровень блока), включая элементы, связанные с таблицей,
    на основе значений top, right, bottom, и left. Смещение не влияет на положение любых других элементов.


4. Как бы вы реализовали кастомный чекбокс
    Связать input и label и стилизовать label
    При псевдоклассе checked для input делаем какие-либо изменения (input:checked + label {})


5. box-sizing: border-box
    padding и border добавляет в размер блока


6.Как обрабатывает WEB страницу браузер?
    1. Формируется DOM дерево из HTML
    2. Загружаются стили
    3. На основании DOM и CSS формирутеся дерево рендера
    4. Для каждого элемента рассчитывается положение на странице
    5. Отрисовывается в браузере


7. Что такой inline стили и какой у них приоритет?
    style={}
    Inline-стиль:1000. Самый большой


8. отличие border и outline
    Border является частью блочного элемента, а outline - нет.
    Для outline не действует скругление и задается со всех 4 сторон элемента


9. Виды верстки.
    Фиксированная верстка
    Фиксированная верстка (Fixed Layout) – подход создания страниц сайта, которые имеют заданную ширину.
    Ширина компонентов на странице не изменяется. На мониторах с маленьким разрешением появляется горизонтальная полоса прокрутки.
    Данный тип верстки не подходит для удобного отображения информации на мобильных устройствах.

    Резиновая верстка
    Резиновая верстка (Elastic layout) подразумевает возможность компонентов сайта менять свои размеры в зависимости от размера окна
    браузера, растягиваться от и до указанных минимальных и максимальных размеров. Это достигается благодаря использованию
    относительных значений, max-width / min-width (максимальная / минимальная ширина), max-height / min-height (максимальная / минимальная высота).

    Адаптивная верстка
    Адаптивная верстка (Adaptive Layout) позволяет подстраиваться основному контейнеру и любому другому элементу сайта под разрешение
    экрана, делая возможным менять размер шрифта, расположение объектов, цвет и т. д. Происходит это динамически, например,
    с использованием медиа-запросов (@media), позволяющих автоматически определять разрешение монитора, тип устройства и подставлять
    указанные значения в автоматическом режиме.
    @media scree (max-width: 400px) {}

    Отзывчивая верстка
    Отзывчивая верстка (Responsive Layout) – это объединение резиновой и адаптивной вёрстки. При данном подходе используются как
    медиа-запросы, так и процентное задание ширины компонентов. Используя данный вид верстки можно с уверенностью сказать,
    что сайт приспособится к любому устройству.


10. Что такое БЭМ?
    В его основе лежит принцип разделения интерфейса на независимые блоки. Он позволяет легко и быстро разрабатывать интерфейсы
    любой сложности и повторно использовать существующий код
    <form class="search-form">
        <div class="search-form__content">
            <input class="search-form__input">
            <button class="search-form__button search-form__button_disabled(модификатор)">Найти</button>
        </div>
    </form>


11. Как при нажатии на ссылку открывать ее в новом окне?
    target="_blank"


12. Как убрать горизонтальную прокрутку
    overflow-x: hidden


13. vh и vn при указании размеров
    vh - 1% от высоты экрана
    vn - 1% от ширины экрана


14. Как убрать маркер у списка?
    list-style: none


15. Приоритет селекторов
    Селектор тега:	1
    Селектор класса:10
    Селектор ID:	100
    Inline-стиль:	1000


16 Псевдоклассы. Какие используем чаще всего
    для описания характеристик элементов
    :hover, :active, :focus, :checked, :last-child, :nth-last-child()


17. Как ведут себя margin у двух элементов по соседству?
    У блочных элементов расположенных рядом друг с другом по вертикали наблюдается эффект схлопывания, когда отступы не суммируются,
    а объединяются между собой(выбирается больший). Горизонтальные не схлопываются, то есть суммируются


18. Background-size свойства
    <значение>
    Задает размер в любых доступных для CSS единицах — пикселы (px), сантиметры (cm), em и др.

    <проценты>
    Задает размер фоновой картинки в процентах от ширины или высоты элемента.

    auto
    Если задано одновременно для ширины и высоты (auto auto), размеры фона остаются исходными;
    если только для одной стороны картинки (100px auto), то размер вычисляется автоматически исходя из пропорций картинки.

    cover
    Масштабирует изображение с сохранением пропорций так, чтобы его ширина или высота равнялась ширине или высоте блока.

    contain
    Масштабирует изображение с сохранением пропорций таким образом, чтобы картинка целиком поместилась внутрь блока.


19. Псевдоэлементы
    Используем чаще всего для стилизации
    ::after
    ::before
    ::first-line
    ::first-letter


20. Flexbox свойство, отвечающее за перенос на новую строку
    flex-wrap: wrap


21.!important
    Для того, чтоб повысить вес селектора и переопределить стили


22. Как увеличить при наведении элемент без сдвигания соседних
    .btn:hover {
        transform: scale(2)    }


23. Свойство для перевода букв в заглавные или строчные
    text-transform: uppercase


24. Для чего используют атрибуты data
    Для хранения каких-либо значений
    data-description="какое-нибудь значение"


25. Стилизация input для загрузки файлов
    <input id="file" type="file">
    <label for="file"> press to add</label>

    input {
        display: none;    }

    label {
        padding: 20px;
        border: 1px black dashed;    }


26. Селекторы атрибутов
    Селекторы атрибутов отбирают элементы по наличию атрибута или его значению.
    Пример.
    input[type=password] {
        border: 1px solid red;    }
27. Как изменить стиль для кнопки с атрибутом disabled?
    .button[disabled] {
        padding: 20px;    }
28. Как изменить стиль для элемента, который идет за выбранным нами
    input + span {
        color: red;    }
29. Как добавить стиль для каждого элемента на странице?
    * {
      color: red;    }
30. Как спрятать элемент, но сохранить его место в DOM дереве
    opacity: 0;
    visibility: hidden;
40. Как сделать тень, падающую от блока
    box-shadow: 4px 4px 4px gray

41. Как сделать тень, падающую от текста
    text-shadow: 4px 4px 4px gray


42. Как повернуть блок на 45 градусов?
    transform: rotateZ(45deg)


43. Как задать глубину смещения?
    perspective: 500px;


44. Как сделать бесконечно повторящуюся анимацию?
    animation-duration: infinite


45. Что такое миксины в препроцессорах?
    можно один раз создать набор CSS-свойств и работать с ними повторно или смешивать с другими значениями.
    Миксины можно использовать для создания отдельных тем одного макета.


46. Как отцентрировать псевдоэлемент?
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);


47. Form
    Тег <form> устанавливает форму на веб-странице. Форма предназначена для обмена данными между пользователем и сервером.
    Область применения форм не ограничена отправкой данных на сервер, с помощью клиентских скриптов можно получить
    доступ к любому элементу формы, изменять его и применять по своему усмотрению.
    Атрибуты
    action Адрес программы или документа, который обрабатывает данные формы.
    autocomplete Включает автозаполнение полей формы.
    method Метод протокола HTTP.
    name Имя формы.
    novalidate Отменяет встроенную проверку данных формы на корректность ввода.
    target Имя окна или фрейма, куда обработчик будет загружать возвращаемый результат.

48. label
    Тег <label> устанавливает связь между определенной меткой, в качестве которой обычно выступает текст,
    и элементом формы (<input>, <select>, <textarea>
    <form action="handler.php">
       <p><b>Lorem ipsum dolor sit amet...</b></p>
       <p><input type="checkbox" id="check1"><label for="check1">Lorem</label><Br>
       <input type="checkbox" id="check2"><label for="check2">Ipsum</label><Br>
       <input type="checkbox" id="check3"><label for="check3">Dolor</label><Br>
       <input type="checkbox" id="check4"><label for="check4">Sit amet</label></p>
    </form>

49. name
    Определяет уникальное имя формы. Как правило, имя формы используется для доступа к ее элементам через скрипты.
    <form action="handler.php" name="form1">
      <p>Имя: <input type="text" name="nick"></p>
      <p><input type="button" onClick="validForm()" value="OK"></p>
    </form>

    <script type="text/javascript">
    function validForm() {
     alert("Имя " + document.forms['form1'].nick.value)
    }
    </script>
